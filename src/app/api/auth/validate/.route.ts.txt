import { NextResponse } from "next/server";
import jwt, { JwtPayload } from "jsonwebtoken";

const JWT_SECRET = process.env.COOKIE_SECRET!;
if (!JWT_SECRET) {
  throw new Error("Missing JWT_SECRET environment variable");
}

function extractTokenFromCookies(req: Request): string | null {
  const cookieHeader = req.headers.get("cookie");
  if (!cookieHeader) return null;

  const cookies = Object.fromEntries(
    cookieHeader.split(";").map(cookie => cookie.trim().split("="))
  );

  return cookies.token || null;
}

export async function GET(req: Request) {
  const token = extractTokenFromCookies(req);

  if (!token) {
    return NextResponse.json(
      { loggedIn: false, message: "No token found" },
      { status: 401 }
    );
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;

    return NextResponse.json(
      { loggedIn: true, user: decoded },
      { status: 200 }
    );
  } catch (error) {
    console.error("JWT verification error:", error);

    return NextResponse.json(
      { loggedIn: false, message: "Invalid or expired token" },
      { status: 401 }
    );
  }
}
